#!/usr/bin/env bash

# Build a portable AppImage starting from a clean system. Other examples at:
# https://github.com/probonopd/AppImages/blob/master/recipes/scribus/Recipe


# NOTES:
#
# 1) IT IS NOT SAFE TO RUN THIS RECIPE ON A PERSISTENT FILESYSTEM! Use either:
#      * A chroot into a Live ISO, squashfs or Docker Image.
#      * Or, a virtual machine on a dedicated build server (e.g. Travis CI)
#    DO NOT RUN THE RECIPE ON A NORMAL COMPUTER OUTSIDE OF A TEMPORARY CHROOT!
#

set -e # Halt on errors
set -x # Be verbose

##########################################################################
# CHECK SYSTEM
##########################################################################

# This script should be run inside CentOS 6 if possible,
# or CentOS 7 if 6 is unavailable for your architecture.
if [ "$(grep "Debian GNU/Linux 8 (jessie)" /etc/*release*)" ]; then
  OS="Debian Jessie"
else
  echo "${0}: Error: Not running on Debian Jessie!" >&2
  exit 1
fi

##########################################################################
# GET DEPENDENCIES
##########################################################################
# only prepare system if not already prepared (custom docker image)
if [ ! -f /etc/system-prepared ]; then
    # ./init.sh - skip
    echo "not prepared"
fi

##########################################################################
# BUILD APPLICATION
##########################################################################
export PATH="${PWD}/qt5/bin:$PATH"
export LD_LIBRARY_PATH="${PWD}/qt5/lib:$LD_LIBRARY_PATH"
export QT_PLUGIN_PATH="${PWD}/qt5/plugins"
export QML_IMPORT_PATH="${PWD}/qt5/qml"
export QML2_IMPORT_PATH="${PWD}/qt5/qml"
export QT_QPA_PLATFORM_PLUGIN_PATH="${PWD}/qt5/plugins/platforms"
export QT_INSTALL_PREFIX="${PWD}/qt5"

arch=x64
project=qmllive
cp ${project}/build/libs/qtquickvcp-${arch}.tar.gz qtquickvcp.tar.gz
mkdir -p output && tar xzf qtquickvcp.tar.gz -C output
rm qtquickvcp.tar.gz

mv output/qml/Machinekit $QML2_IMPORT_PATH/
mv output/lib/* $QT_INSTALL_PREFIX/lib/

cd ${project}

mkdir -p build.release
cd build.release

qmake -r ..
make
make install

# create binary zip file
qt-deploy ../build/deployment-scripts/linux_x64.ini --deploy

# prepare AppDir
targetname=QmlLiveBench
cd ${targetname}.AppDir
cp /usr/share/pixmaps/qmllivebench.png .
cp /usr/share/applications/qmllivebench.desktop .
mv ${targetname} AppRun
cd ..

# prepare variables
appdir=${PWD}/${targetname}.AppDir/
appimage=${PWD}/${targetname}.AppImage

# back to home folder
cd ../../

##########################################################################
# PACKAGE INTO APPIMAGE WITH APPIMAGEKIT
##########################################################################

cd AppImageKit/AppImageAssistant.AppDir
./package "$appdir" "$appimage"

# allow access to AppImage from outside the chroot
chmod a+rwx "$appimage"
parent_dir="$(dirname "$appimage")"
while [ "$(dirname "$parent_dir")" != "$parent_dir" ]; do
  [ "$parent_dir" == "/" ] && break
  chmod a+rwx "$parent_dir"
  parent_dir="$(dirname "$parent_dir")"
done

ls -lh "$appimage"
